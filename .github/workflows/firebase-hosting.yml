name: Firebase Hosting Deploy

on:
  push:
    branches: [ prod, dev ]
  pull_request:
    branches: [ prod, dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'prod' && 'Prod' || github.ref_name == 'dev' && 'Dev' || 'Dev' }}
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Check FIREBASE_TOKEN
        id: token
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          if [ -n "$FIREBASE_TOKEN" ]; then
            echo "HAS_TOKEN=true" >> $GITHUB_OUTPUT
          else
            echo "HAS_TOKEN=false" >> $GITHUB_OUTPUT
          fi

      - name: Set environment mapping
        id: envmap
        run: |
          if [[ "${GITHUB_REF_NAME}" == "prod" ]]; then
            echo "ALIAS=prod" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT=Prod" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            echo "ALIAS=dev" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT=Dev" >> $GITHUB_OUTPUT
          else
            echo "ALIAS=dev" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT=Dev" >> $GITHUB_OUTPUT
          fi

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Set up Firebase service account (optional)
        id: sa
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          if [ -n "$FIREBASE_SERVICE_ACCOUNT" ]; then
            echo "$FIREBASE_SERVICE_ACCOUNT" | base64 -d > ${GITHUB_WORKSPACE}/gcp-creds.json || echo "$FIREBASE_SERVICE_ACCOUNT" > ${GITHUB_WORKSPACE}/gcp-creds.json
            echo "GOOGLE_APPLICATION_CREDENTIALS=${GITHUB_WORKSPACE}/gcp-creds.json" >> $GITHUB_ENV
            echo "HAS_SA=true" >> $GITHUB_OUTPUT
          else
            echo "HAS_SA=false" >> $GITHUB_OUTPUT
          fi

      - name: Install deps
        if: hashFiles('package.json') != ''
        run: |
          npm ci

      - name: Build
        if: hashFiles('package.json') != ''
        env:
          NODE_ENV: production
          # Skip CRA ESLint during CI builds to avoid failing on warnings
          DISABLE_ESLINT_PLUGIN: true
          # Also ensure CRA doesnâ€™t treat warnings as errors
          CI: false
          # Inject Firebase client config from environment-specific secrets
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
        run: |
          if npm run | grep -qE "\bbuild\b"; then
            npm run build
          else
            echo "No build script; skipping build"
          fi

      - name: Install Firebase CLI
        run: npm i -g firebase-tools

      - name: Deploy to Firebase Hosting (push)
        if: github.event_name == 'push' && (steps.sa.outputs.HAS_SA == 'true' || steps.token.outputs.HAS_TOKEN == 'true')
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          firebase deploy --only hosting --project ${{ steps.envmap.outputs.ALIAS }}

      - name: Preview deploy to Hosting (PR)
        if: github.event_name == 'pull_request' && (steps.sa.outputs.HAS_SA == 'true' || steps.token.outputs.HAS_TOKEN == 'true')
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          firebase hosting:channel:deploy ${{ github.head_ref }} \
            --project ${{ steps.envmap.outputs.ALIAS }} \
            --expires 7d
